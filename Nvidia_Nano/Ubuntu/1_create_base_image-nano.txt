# TX1 setup script for use as companion computer

# STEP1: Run ONE of STEP1A or STEP1B

# STEP1a : Create an SD Card with the base image for the Nvidia Nano following Nvidia's Instructions:
# https://developer.nvidia.com/embedded/learn/get-started-jetson-nano-devkit#write

# STEP1b : Alternatively you can use Nvidias SDK Manager to flash the SD card on the nano, you can download jetpack from here:
# https://developer.nvidia.com/embedded/jetpack

# Then follow Nvidia's documentation to install jetpack onto the SD Card on the Nano. 
# It is recomended that you use STEP1a to install the base image.

# STEP2 : Using a keyboard, mouse and monitor complete the setup steps as propted on the screen by the Ubuntu setup
# When asked about your name use "apsync user", computers name use "apsync", user name use "apsync" password use "apsync". Select the mark that says login automatically and click continue.
# Wait for the setup to complete. Once the setup is complete and the Nano has rebooted, find the ip address by opening a terminal and typing "ifconfig"

# Step 3 : install packages on Jetson Nano
#    power on the Nano
#    log onto the Nano as apsync/apsync (you may be able to do this over ethernet using the hostname you selected during STEP2 (apsync) or use the ip address you found)

TEGRA=apsync.local

# copy your private key over:
ssh-copy-id apsync@$TEGRA

# login to the nano
ssh apsync@$TEGRA

# Add the user to the appropiate groups:
sudo usermod -a -G sudo,netdev,users,dialout,video apsync

cd ~
mkdir GitHub
pushd GitHub
git clone https://github.com/ArduPilot/companion.git
pushd companion/Nvidia_Nano/Ubuntu
#sudo ./set-hostname   # reset the machine's hostname
sudo apt-get autoremove -y # avoid repeated no-longer-required annoyance
#sudo ./change-autologin-user.sh
sudo ./remove-unattended-upgrades # 
sudo ./ensure_rc_local.sh
#sudo ./disable_console.sh
sudo reboot # ensure hostname correct / console disabling OK / autologin working
TEGRA=apsync.local # on your laptop....
ssh apsync@$TEGRA
pushd GitHub/companion/Nvidia_Nano/Ubuntu
# consider exporting a http proxy:
# export http_proxy=http://bogg.local:3128/
time sudo -E ./2_install_packages.sh # 20m
time sudo -E ./install_niceties || echo "Failed" # 20s
time sudo -E ./3_wifi_access_point.sh # 20s
time sudo ./wifi_client.sh # instant
sudo ./4_setup_log_rotation # instant
time sudo -E ./6_setup_video.sh # 1m
time sudo -E ./8_setup_cmavnode.sh # ~4m
time sudo -E ./setup_mavlink-router # ~2m
time sudo -E ./7_dflogger.sh # ~210s
sudo ./5_setup_mavproxy.sh # instant
time sudo -E ./setup-video-streaming # 11s

time sudo -E apt-get install -y libxml2-dev libxslt1.1 libxslt1-dev
time sudo pip install future lxml # 4m
time sudo ./install_pymavlink # new version required for apweb #1m
time sudo ./install_apweb # 2m

# OpenKAI not available due to OpenCV compatability issues....
# time sudo -E ./install_openkai.sh

# reboot and test image according to testing.txt
sudo reboot

# Step 4: cleanup
time (pushd ~/GitHub/companion/Nvidia_JTX1/Ubuntu && sudo ./clean-for-imaging)


sudo poweroff

# Step 5: download apsync image from TX2:
#    put TX2 into bootloader mode: Hold Force Recovery button (aka "REC"), press Reset button(aka "RST"), Release Force Recovery button
watch lsusb
BASEDIR=~/jetpack
L4T=$BASEDIR/64_TX2/Linux_for_Tegra
#    run download_image.sh from this repo:
TIMESTAMP=`date '+%Y%m%d%H%M'`
# consider using an absolute path for IMAGE_NAME here! e.g. /vagrant/...
IMAGE_NAME="/vagrant/apsync-tx2-$TIMESTAMP.img"

cd $L4T
time sudo ./flash.sh -r -k APP -G $IMAGE_NAME jetson-tx2 mmcblk0p1 # about 30 minutes

# on host machine (not on the Vagrant VM!)
ls -l $IMAGE_NAME # about 8GB
time xz --verbose -e $IMAGE_NAME # about 1.5 hours
COMPRESSED_IMAGE_NAME="$IMAGE_NAME.xz"
ls -l --si  $COMPRESSED_IMAGE_NAME # ~3.2GB
BASE_COMPRESSED_IMAGE_NAME=$(basename "$COMPRESSED_IMAGE_NAME")
time rsync -aP $COMPRESSED_IMAGE_NAME autotest@autotest.ardupilot.org:APM/buildlogs/binaries/Companion/next/$BASE_COMPRESSED_IMAGE_NAME # about 11.5 hours
